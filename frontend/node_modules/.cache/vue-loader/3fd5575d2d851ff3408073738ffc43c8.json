{"remainingRequest":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\src\\views\\calculator.vue?vue&type=template&id=54ec7f9c&scoped=true&","dependencies":[{"path":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\src\\views\\calculator.vue","mtime":1619714139787},{"path":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Documents\\GitHub\\fatego\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}