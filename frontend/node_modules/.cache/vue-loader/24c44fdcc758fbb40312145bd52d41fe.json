{"remainingRequest":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\src\\views\\Signup.vue?vue&type=template&id=024d905c&","dependencies":[{"path":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\src\\views\\Signup.vue","mtime":1619167756793},{"path":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Bordee\\Desktop\\Work KMITL\\Work 2.2\\web\\WEEK12-EXERCISE-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}