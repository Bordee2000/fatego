{"remainingRequest":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\src\\views\\servant\\servantDetail.vue?vue&type=template&id=78cb029a&","dependencies":[{"path":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\src\\views\\servant\\servantDetail.vue","mtime":1620111982125},{"path":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\KMITL\\ปี 2 เทอม 2\\Web Programming\\fatego\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIGlzLWZsdWlkIG10LTYiIH0sIFsKICAgIF92bS5fbSgwKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBpcy1jZW50ZXJlZCIgfSwgWwogICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAiaXMtc2l6ZS0xIHRpdGxlIHB4LTYiIH0sIFsKICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5zZXJ2YW50Lm5hbWUpICsgIiBIZWxsbyIpCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBpcy1jZW50ZXJlZCIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImlzLW11bHRpbGluZSBpcy1oYWxmIGhhcy10ZXh0LWNlbnRlcmVkIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjV2dyIgfQogICAgICAgIH0sCiAgICAgICAgX3ZtLl9sKF92bS5zZXJ2YW50X2ltYWdlLCBmdW5jdGlvbihzdGFnZSkgewogICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGtleTogc3RhZ2UuaWQsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24gaXMtcm91bmRlZCBwLTIgbS0xIiwKICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgIHN0YWdlLnN0YWdlID09IF92bS5zZWxlY3Rfc3RhZ2UKICAgICAgICAgICAgICAgICAgPyAiaXMtZGFyayIKICAgICAgICAgICAgICAgICAgOiAiaXMtYmxhY2sgaXMtaW52ZXJ0ZWQiLAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIDsoX3ZtLnNlbGVjdF9zdGFnZSA9IHN0YWdlLnN0YWdlKSwgX3ZtLmdldEltYWdlKHN0YWdlLnN0YWdlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic3RhZ2UgIiArIF92bS5fcyhzdGFnZS5zdGFnZSkpXQogICAgICAgICAgKQogICAgICAgIH0pLAogICAgICAgIDAKICAgICAgKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbHVtbnMgaXMtY2VudGVyZWQgbXgtMiBtYi02IG10LTMiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4gaXMtMyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwLTIgdGV4dGFyZWEiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIxcHggc29saWQgYmxhY2siLAogICAgICAgICAgICAgICAgd2lkdGg6ICIyMHZ3IiwKICAgICAgICAgICAgICAgICJib3gtc2hhZG93IjogIjBweCAwcHggMTBweCIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IHJvd3M6ICI0IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQUtBOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5zZXJ2YW50Lm5hbWUpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIklEOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5zZXJ2YW50LmlkKSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX20oMikKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBtdC0yIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInAtMiB0ZXh0YXJlYSIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjFweCBzb2xpZCBibGFjayIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjIwdnciLAogICAgICAgICAgICAgICAgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcm93czogIjMiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4iIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFUSzoiKV0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLnNlcnZhbnQuYXRrKSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDQpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJIUDoiKV0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLnNlcnZhbnQuaHApKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgICAgICAgICBfdm0uX20oNikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBtdC0yIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInAtMiB0ZXh0YXJlYSIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjFweCBzb2xpZCBibGFjayIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjIwdnciLAogICAgICAgICAgICAgICAgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcm93czogIjMiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdlbmRlcjoiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uc2VydmFudC5nZW5kZXIpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fbSg3KSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBbGlnbm1lbnRzOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5zZXJ2YW50LmFsaWdubWVudHMpKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX20oOCkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1uIGlzLTMiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbHVtbnMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIHRleHRhcmVhIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgYm9yZGVyOiAiMXB4IHNvbGlkIGJsYWNrIiwKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjB2dyIsCiAgICAgICAgICAgICAgICAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyByb3dzOiAiNCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl9tKDkpLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkF0dHJpYnV0ZToiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uc2VydmFudC5hdHRyaWJ1dGUpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiR3Jvd3RoIEN1cnZlOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5zZXJ2YW50Lmdyb3d0aF9jdXJ2ZSkpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBtdC0yIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInAtMiB0ZXh0YXJlYSIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjFweCBzb2xpZCBibGFjayIsCiAgICAgICAgICAgICAgICB3aWR0aDogIjIwdnciLAogICAgICAgICAgICAgICAgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcm93czogIjUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0YXIgQWJzb3JwdGlvbjoiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uc2VydmFudC5zdGFyX2Fic29ycHRpb24pKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0YXIgR2VudGVyYXRpb246IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLnNlcnZhbnQuc3Rhcl9nZW5lcmF0aW9uKSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOUCBDaGFuZ2UgQVRLOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5zZXJ2YW50Lm5wX2NoYXJnZV9hdGspKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5QIENoYW5nZSBERUY6IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLnNlcnZhbnQubnBfY2hhcmdlX2RlZikpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRGVhdGggUmF0ZToiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uc2VydmFudC5kZWF0aF9yYXRlKSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgImNvbHVtbnMgaXMtY2VudGVyZWQgaXMtbXVsdGlsaW5lIGhhcy10ZXh0LWNlbnRlcmVkIG10LTUiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiQnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImNhcmQgYnV0dG9uIG0tMyBweS0yIGlzLXNpemUtNiBoYXMtdGV4dC13ZWlnaHQtYm9sZCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQyJSIsICJib3gtc2hhZG93IjogIjBweCAwcHggMTBweCIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXRhcmdldCI6ICIjYWN0aXZlX3NraWxsIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RfYnV0dG9uID0gImFjdGl2ZV9za2lsbCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQWN0aXZlIFNraWxsIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJCdXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiY2FyZCBidXR0b24gbS0zIHB5LTIgaXMtc2l6ZS02IGhhcy10ZXh0LXdlaWdodC1ib2xkIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDIlIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtdGFyZ2V0IjogIiNwYXNzaXZlX3NraWxsIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RfYnV0dG9uID0gInBhc3NpdmVfc2tpbGwiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlBhc3NpdmUgU2tpbGxzIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJCdXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiY2FyZCBidXR0b24gbS0zIHB5LTIgaXMtc2l6ZS02IGhhcy10ZXh0LXdlaWdodC1ib2xkIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDIlIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtdGFyZ2V0IjogIiNub2JsZV9waGFudGFzbSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0X2J1dHRvbiA9ICJub2JsZV9waGFudGFzbSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiTm9ibGUgUGhhbnRhc20iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIkJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjYXJkIGJ1dHRvbiBtLTMgcHktMiBpcy1zaXplLTYgaGFzLXRleHQtd2VpZ2h0LWJvbGQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0MiUiLCAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS10YXJnZXQiOiAiI2FzY2Vuc2lvbiIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0X2J1dHRvbiA9ICJhc2NlbnNpb24iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkFzY2Vuc2lvbiIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiQnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImNhcmQgYnV0dG9uIG0tMyBweS0yIGlzLXNpemUtNiBoYXMtdGV4dC13ZWlnaHQtYm9sZCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQyJSIsICJib3gtc2hhZG93IjogIjBweCAwcHggMTBweCIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXRhcmdldCI6ICIjc2tpbGxfdXBncmFkZSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0X2J1dHRvbiA9ICJza2lsbF91cGdyYWRlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJTa2lsbCBVcGdyYWRlIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJCdXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiY2FyZCBidXR0b24gbS0zIHB5LTIgaXMtc2l6ZS02IGhhcy10ZXh0LXdlaWdodC1ib2xkIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDIlIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtdGFyZ2V0IjogIiNzdGF0ZSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0X2J1dHRvbiA9ICJzdGF0ZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiU3RhdGUiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIkJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjYXJkIGJ1dHRvbiBtLTMgcHktMiBpcy1zaXplLTYgaGFzLXRleHQtd2VpZ2h0LWJvbGQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0MiUiLCAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS10YXJnZXQiOiAiI0JvbmRfTGV2ZWwiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLnNlbGVjdF9idXR0b24gPSAiQm9uZF9MZXZlbCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQm9uZCBMZXZlbCIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiQnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImNhcmQgYnV0dG9uIG0tMyBweS0yIGlzLXNpemUtNiBoYXMtdGV4dC13ZWlnaHQtYm9sZCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjQyJSIsICJib3gtc2hhZG93IjogIjBweCAwcHggMTBweCIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXRhcmdldCI6ICIjQmlvZ3JhcGh5IiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RfYnV0dG9uID0gIkJpb2dyYXBoeSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiQmlvZ3JhcGh5IildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJCdXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiY2FyZCBidXR0b24gbS0zIHB5LTIgaXMtc2l6ZS02IGhhcy10ZXh0LXdlaWdodC1ib2xkIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNDIlIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtdGFyZ2V0IjogIiNUcml2aWEiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLnNlbGVjdF9idXR0b24gPSAiVHJpdmlhIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJUcml2aWEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIkJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjYXJkIGJ1dHRvbiBtLTMgcHktMiBpcy1zaXplLTYgaGFzLXRleHQtd2VpZ2h0LWJvbGQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0MiUiLCAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyAiZGF0YS10YXJnZXQiOiAiI0ltYWdlcyIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0X2J1dHRvbiA9ICJJbWFnZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkltYWdlcyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSkKICAgIF0pLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2RhbCIsCiAgICAgICAgY2xhc3M6IF92bS5zZWxlY3RfYnV0dG9uID09ICJhY3RpdmVfc2tpbGwiID8gImlzLWFjdGl2ZSIgOiAiIiwKICAgICAgICBhdHRyczogeyBpZDogImFjdGl2ZV9za2lsbCIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9kYWwtYmFja2dyb3VuZCIsCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNlbGVjdF9idXR0b24gPSAiIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jYXJkIiB9LCBbCiAgICAgICAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNhcmQtaGVhZCIgfSwgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBY3RpdmUgU2tpbGwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJ1dHRvbiIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRlbGV0ZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWwiOiAiY2xvc2UiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgX3ZtLnNlbGVjdF9idXR0b24gPSAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY2FyZC1ib2R5IiB9KQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbHVtbnMgaXMtY2VudGVyZWQiIH0sIFsKICAgICAgX2MoImZpZ3VyZSIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZSBpcy02NHg2NCIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RhdGljLndpa2lhLm5vY29va2llLm5ldC9mYXRlZ3JhbmRvcmRlci9pbWFnZXMvYS9hYi9DbGFzcy1TaGllbGRlci1Hb2xkLnBuZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCBbCiAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJKYXBhbmVzZSBOYW1lOiIpXSksCiAgICAgIF92bS5fdigiIE5vdCBoYXZlIGluIERhdGFCYXNlIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgWwogICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29zdDoiKV0pLAogICAgICBfdm0uX3YoIiBEb24ndCBrbm93IHdoYXQgdmFsdWUiKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGFzLXRleHQtZGFuZ2VyIiB9LCBbCiAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAiaGFzLXRleHQtZGFuZ2VyIiB9LCBbX3ZtLl92KCI04piFQVRLOiIpXSksCiAgICAgIF92bS5fdigiIERvbid0IGtub3cgd2hhdCB2YWx1ZSIpCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC13YXJuaW5nLWRhcmsiIH0sIFsKICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC13YXJuaW5nLWRhcmsiIH0sIFsKICAgICAgICBfdm0uX3YoIkdyYWlsIEFSSzoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgRG9uJ3Qga25vdyB3aGF0IHZhbHVlIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhhcy10ZXh0LWRhbmdlciIgfSwgWwogICAgICBfYygic3Ryb25nIiwgeyBzdGF0aWNDbGFzczogImhhcy10ZXh0LWRhbmdlciIgfSwgW192bS5fdigiNOKYhUhQOiIpXSksCiAgICAgIF92bS5fdigiIERvbid0IGtub3cgd2hhdCB2YWx1ZSIpCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC13YXJuaW5nLWRhcmsiIH0sIFsKICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC13YXJuaW5nLWRhcmsiIH0sIFsKICAgICAgICBfdm0uX3YoIkdyYWlsIEhQOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiBEb24ndCBrbm93IHdoYXQgdmFsdWUiKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCBbCiAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUcmFpdHM6IildKSwKICAgICAgX3ZtLl92KCIgRG9uJ3Qga25vdyB3aGF0IHZhbHVlIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29sdW1ucyBpcy1jZW50ZXJlZCBpcy1tdWx0aWxpbmUgbXQtNSIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJmaWd1cmUiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImltYWdlIG0tMiIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjglIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3N0YXRpYy53aWtpYS5ub2Nvb2tpZS5uZXQvZmF0ZWdyYW5kb3JkZXIvaW1hZ2VzLzgvODQvUXVpY2sucG5nIiwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJmaWd1cmUiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImltYWdlIG0tMiIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjglIiwgImJveC1zaGFkb3ciOiAiMHB4IDBweCAxMHB4IiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3N0YXRpYy53aWtpYS5ub2Nvb2tpZS5uZXQvZmF0ZWdyYW5kb3JkZXIvaW1hZ2VzLzkvOTUvQXJ0cy5wbmciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImZpZ3VyZSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1hZ2UgbS0yIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyOCUiLCAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vc3RhdGljLndpa2lhLm5vY29va2llLm5ldC9mYXRlZ3JhbmRvcmRlci9pbWFnZXMvOS85NS9BcnRzLnBuZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZmlndXJlIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWFnZSBtLTIiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjI4JSIsICJib3gtc2hhZG93IjogIjBweCAwcHggMTBweCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9zdGF0aWMud2lraWEubm9jb29raWUubmV0L2ZhdGVncmFuZG9yZGVyL2ltYWdlcy82LzZlL0J1c3Rlci5wbmciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImZpZ3VyZSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1hZ2UgbS0yIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyOCUiLCAiYm94LXNoYWRvdyI6ICIwcHggMHB4IDEwcHgiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vc3RhdGljLndpa2lhLm5vY29va2llLm5ldC9mYXRlZ3JhbmRvcmRlci9pbWFnZXMvNi82ZS9CdXN0ZXIucG5nIiwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgWwogICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVm9pY2UgQWN0b3I6IildKSwKICAgICAgX3ZtLl92KCIgRG9uJ3Qga25vdyB3aGF0IHZhbHVlIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJwIiwgWwogICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSWxsdXN0cmF0b3I6IildKSwKICAgICAgX3ZtLl92KCIgRG9uJ3Qga25vdyB3aGF0IHZhbHVlIikKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}